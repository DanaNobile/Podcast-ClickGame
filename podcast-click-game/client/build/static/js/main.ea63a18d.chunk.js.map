{"version":3,"sources":["components/PodcastCard/podcast.js","components/Wrapper/wrapper.js","components/Score/score.js","App.js","serviceWorker.js","index.js"],"names":["PodcastCard","props","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","podcasts","clickedPodcasts","score","goal","includes","setState","push","length","console","log","i","j","Math","floor","random","this","map","podcastID","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"qwEA2BeA,G,MAtBK,SAAAC,GAAK,OACrB,yBAAKC,UAAU,4BACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAC9CC,QAAS,kBAAMP,EAAMQ,iBAAiBR,EAAMM,KAAKL,UAAU,oB,MCDxDQ,MAJf,SAAiBT,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,WCa5BC,G,MAZD,SAAAX,GAAK,OACf,yBAAKC,UAAU,aACX,qHACI,6BAEA,6BAHJ,iFAKA,wBAAIA,UAAU,SAAd,gBAAoCD,EAAMY,OAC1C,wBAAIX,UAAU,UAAUD,EAAMa,W,OCwEvBC,G,kNAzEbC,MAAQ,CACNC,WACAC,gBAAiB,GACjBC,MAAO,EACPC,KAAM,GACNN,OAAQ,I,EAIVL,iBAAmB,SAAAF,GACjB,IAAIW,EAAkB,EAAKF,MAAME,gBAEjC,GAAIA,EAAgBG,SAASd,GAC3B,EAAKe,SAAS,CAAEJ,gBAAiB,GAAIC,MAAO,EAAGL,OAAQ,yDADzD,CAME,GAFAI,EAAgBK,KAAKhB,GAEU,KAA3BW,EAAgBM,OAGlB,OAFA,EAAKF,SAAS,CAAEH,MAAO,GAAIL,OAAQ,8DAA+DI,gBAAiB,UACnHO,QAAQC,IAAI,WAId,EAAKJ,SAAS,CAAEL,WAAUC,kBAAiBC,MAAOD,EAAgBM,OAAQV,OAAQ,MAElF,IAAK,IAAIa,EAAIV,EAASO,OAAS,EAAGG,EAAI,EAAGA,IAAK,CAC5C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADI,EAEf,CAACV,EAASW,GAAIX,EAASU,IAAnDV,EAASU,GAFkC,KAE9BV,EAASW,GAFqB,Q,uDASxC,IAAD,OACP,OACE,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,kCACA,uBAAGA,UAAU,eAIf,kBAAC,EAAD,CAAOW,MAAOmB,KAAKhB,MAAMG,MACvBC,KAAM,GACNN,OAAQkB,KAAKhB,MAAMF,SAErB,kBAAC,EAAD,KACGkB,KAAKhB,MAAMC,SAASgB,KAAI,SAAAC,GAAS,OAChC,kBAAC,EAAD,CACEzB,iBAAkB,EAAKA,iBACvBF,GAAI2B,EAAU3B,GACd4B,IAAKD,EAAU3B,GACfD,MAAO4B,EAAU5B,YAIvB,gCACE,0F,GA7DQ8B,c,MCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAEP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.ea63a18d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n\nconst PodcastCard = props => (\n    <div className=\"card img-container hover\">\n        <img alt={props.name} src={props.image} id={props.id}\n            onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore' />\n    </div>\n);\n\n// function PodcastCard(props) {\n//     return (\n\n//         < div className=\"card\" >\n//             <div className=\"img-container\">\n//                 <img alt={props.name} src={props.image} />\n//             </div>\n\n//             <span onClick={() => props.MovePodcast(props.id)} className=\"move\">\n//                 {/* ùòÖ */}\n//             </span>\n//         </div >\n//     );\n// }\n\nexport default PodcastCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n// import Arrow from 'react-icons/lib/fa/caret-right';\n\n//stateless component\nconst Score = props => (\n    <div className=\"gameScore\">\n        <p>Your goal is to try and click all of the podcasts, without clicking the same one twice.\n            <br>\n            </br>\n            <br></br>\n            Look out though! The images start to move on you, so flex your memory muscle!</p>\n        <h3 className=\"score\">Your Score = {props.total}</h3>\n        <h3 className=\"status\">{props.status}</h3>\n    </div>\n);\n\nexport default Score;\n","import React, { Component } from \"react\";\nimport PodcastCard from \"./components/PodcastCard/podcast\";\nimport Wrapper from \"./components/Wrapper/wrapper\";\n\nimport Score from \"./components/Score/score\";\nimport podcasts from \"./podcasts.json\";\nimport \"./App.css\";\n\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    podcasts,\n    clickedPodcasts: [],\n    score: 0,\n    goal: 12,\n    status: \"\"\n\n  };\n\n  shuffleScoreCard = id => {\n    let clickedPodcasts = this.state.clickedPodcasts;\n\n    if (clickedPodcasts.includes(id)) {\n      this.setState({ clickedPodcasts: [], score: 0, status: \"Game Over! Sorry, you lost. Click to play again!\" });\n      return;\n    } else {\n      clickedPodcasts.push(id)\n\n      if (clickedPodcasts.length === 12) {\n        this.setState({ score: 12, status: \"You Won! Great Job, True Crime Junkie! Click to play again!\", clickedPodcasts: [] });\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ podcasts, clickedPodcasts, score: clickedPodcasts.length, status: \" \" });\n\n      for (let i = podcasts.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [podcasts[i], podcasts[j]] = [podcasts[j], podcasts[i]];\n      }\n    }\n  }\n\n\n  // Map over this.state.cards and render a Card component for each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">True Crime Podcast Clicky Game</h1>\n          <p className=\"App-intro\">\n\n          </p>\n        </header>\n        <Score total={this.state.score}\n          goal={12}\n          status={this.state.status}\n        />\n        <Wrapper>\n          {this.state.podcasts.map(podcastID => (\n            <PodcastCard\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={podcastID.id}\n              key={podcastID.id}\n              image={podcastID.image}\n            />\n          ))}\n        </Wrapper>\n        <footer>\n          <p>Thanks for playing the True Crime Podcast Clicky Game</p>\n        </footer>\n      </div>\n    );\n  }\n\n\n\n\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <App />,\n  document.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}